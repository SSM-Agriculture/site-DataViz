  // ================= //
 // masa-closeread.js //
// ================= //

// Ce fichier r√©pertorie l'ensemble des fonctionnalit√© disponibles pour r√©digez les dataviz pour de MASA

/* ==========================
   üìÑ DOCUMENTATION DU SCRIPT
   ==========================

   Ce fichier regroupe les √©l√©ments et fonctions utilis√©s
   dans le script JavaScript du projet Quarto + CloseRead
   avec cartes Leaflet dans des iframes.

   ======================
   // ELEMENTS IMPORTANTS
   ======================

   // document //

   L'objet global qui repr√©sente toute la page HTML.
   Permet d'acc√©der √† l'ensemble du DOM, ajouter des √©v√©nements,
   ou manipuler les √©l√©ments de la page.

   Exemple :
   document.getElementById("monElement");

   // iframe //

   √âl√©ment HTML <iframe> permettant d‚Äôint√©grer une autre page HTML dans l‚Äôactuelle.
   Dans notre cas, chaque carte Leaflet est incluse dans une iframe.

   Pour acc√©der au contenu de l‚Äôiframe :
   - iframe.contentWindow : fen√™tre JavaScript interne (utile pour acc√©der √† `map`)
   - iframe.contentDocument : DOM de l‚Äôiframe (utile pour chercher un script, une div‚Ä¶)

   Exemple :
   const map = iframe.contentWindow.map;

   // .narrative //

   √âl√©ment contenant une bulle de texte dans le storytelling CloseRead.
   Plusieurs √©l√©ments `.narrative` d√©filent en superposition d‚Äôun fond sticky.

   // .trigger //

   √âl√©ment utilis√© pour d√©tecter les entr√©es/sorties dans le viewport via Scrollama.
   Chaque `.narrative` est englob√© dans un unique `.trigger`.
   un Index Scrollama est associ√© √† chaque `.trigger` (respectant la synthaxe de CloseRead)

   // dataset //

   Objet permettant d‚Äôacc√©der aux attributs `data-*` d‚Äôun √©l√©ment HTML.
   Exemple :
   <div data-scrollama-index="3"></div>

   JavaScript :
   element.dataset.scrollamaIndex // Renvoie "3" (string)

   ============================
   // FONCTIONS JS IMPORTANTES
   ============================

   // getElementById(id) //

   Permet de r√©cup√©rer un √©l√©ment HTML par son ID.

   Syntaxe :
   document.getElementById("map");

   Retourne :
   L'√©l√©ment HTML correspondant ou null s‚Äôil n‚Äôexiste pas.

   Exemple :
   const centroidsScript = document.getElementById("centroids");

   // getBoundingClientRect() //

   Permet de r√©cup√©rer la taille et la position d‚Äôun √©l√©ment
   relativement √† la fen√™tre du navigateur (viewport).

   Syntaxe :
   const rect = element.getBoundingClientRect();

   Retourne un objet contenant :
   - top : distance entre le haut de la fen√™tre et le haut de l‚Äô√©l√©ment
   - bottom : distance entre le haut de la fen√™tre et le bas de l‚Äô√©l√©ment
   - left : distance entre la gauche de la fen√™tre et la gauche de l‚Äô√©l√©ment
   - right : distance entre la gauche de la fen√™tre et la droite de l‚Äô√©l√©ment
   - x : √©quivalent √† left
   - y : √©quivalent √† top
   - width : largeur de l‚Äô√©l√©ment (en px)
   - height : hauteur de l‚Äô√©l√©ment (en px)

   Exemple :
   if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
     // L'√©l√©ment est compl√®tement visible √† l'√©cran
   }

   // querySelector(selector) //

   S√©lectionne le premier √©l√©ment correspondant √† un s√©lecteur CSS.

   Syntaxe :
   document.querySelector(".classe");

   Retourne :
   L'√©l√©ment trouv√© ou null.

   // querySelectorAll(selector) //

   S√©lectionne tous les √©l√©ments correspondant √† un s√©lecteur CSS.

   Syntaxe :
   const elements = document.querySelectorAll(".narrative");

   Retourne :
   Une NodeList (liste statique d‚Äô√©l√©ments DOM).

   // JSON.parse(json) //

   Transforme une cha√Æne JSON en objet JavaScript.

   Syntaxe :
   const obj = JSON.parse('{ "nom": "France" }');

   Retour :
   Un objet JavaScript utilisable directement.

   // Array.from(iterable) //

   Convertit une NodeList ou tout autre objet it√©rable en tableau.

   Exemple :
   const bullesArray = Array.from(document.querySelectorAll(".narrative"));

   // find(callback) //

   M√©thode de tableau. Retourne le premier √©l√©ment qui passe le test.

   Exemple :
   const item = items.find(el => el.id === "paris");

   // forEach(callback) //

   Ex√©cute une fonction pour chaque √©l√©ment du tableau.

   Exemple :
   bulles.forEach((bulle, index) => {
     console.log(index, bulle.textContent);
   });

   // setTimeout(callback, d√©lai) //

   Ex√©cute une fonction apr√®s un certain temps (en millisecondes).

   Exemple :
   setTimeout(() => {
     console.log("1 seconde plus tard");
   }, 1000);

   // addEventListener(type, callback) //

   Attache un gestionnaire d‚Äô√©v√©nement √† un √©l√©ment.

   Exemple :
   window.addEventListener("scroll", () => {
     console.log("Scroll d√©tect√©");
   });

   // parseInt(string, base) //

   Convertit une cha√Æne de caract√®res en entier.

   Exemple :
   const index = parseInt("42", 10); // ‚Üí 42

   // console.log(), console.warn(), console.error() //

   Affiche des messages dans la console (debug).
   - console.log("Message");
   - console.warn("Avertissement");
   - console.error("Erreur");

   =====================
   // FONCTIONS LEAFLET
   =====================

   // map.setView([lat, lng], zoom, options) //

   Centre la carte Leaflet sur un point donn√© avec un niveau de zoom.

   Exemple :
   map.setView([46.5, 2.5], 6, { animate: true });

   // L.popup() //

   Cr√©e une popup Leaflet.

   Exemple :
   const popup = L.popup()
     .setLatLng([48.85, 2.35])
     .setContent("Paris")
   map.openPopup(popup);
*/


  // =============== //
 // menus d√©roulant //
// =============== //

/* Int√®gre les fonctionalit√© JS pour ouvrir un menu d√©roulant ou des liens cliquables */
function openMenu(id) {
  document.getElementById(id).classList.add("active");
}
function closeMenu(id) {
  document.getElementById(id).classList.remove("active");
}
function goTo(url) {
  window.location.href = url;
}
          
          
  // ====================== //
 // Gestion des infobulles // 
// ====================== //

 // Objectif : Ouvrir une bulle avec du texte √† l'int√©rieur lorsque l'utilisateur click sur un certain √©l√©ment de la Viz //
// ==================================================================================================================== //


   // Pr√©cision sur les √©l√©ments utilis√©s : ---------------------------------------- //
  // tooltip-container (appel√© container) = Cercle jaune pr√©sent en dessous du "?"  //
 // tooltip-question (appel√© question) = "?"                                       //
// tooltip-content (appel√© content) = Bloc ouvert lorsque l'on clique sur le "?"   //


// Charger le contenu de la page
document.addEventListener("DOMContentLoaded", function () {
  // Collecter l'ensemble des infobulles du document 
  const tooltips = document.querySelectorAll(".tooltip-container");
  
// Pour chaque infobulle du document, ouvrir un bloc avec du texte dedans lorsque l'on clique dessus
tooltips.forEach((tooltip) => {
  // R√©agir au clic
  tooltip.addEventListener("click", function (e) {
    // Emp√™cher qu'une autre infobulle ne soit ouverte en m√™me temps
    e.stopPropagation();
    // Assigner la classe active √† l'infobulle
    tooltip.classList.toggle("active");

    // Fermer toutes les autres
    tooltips.forEach((other) => {
      if (other !== tooltip) {
        other.classList.remove("active");
     }
    });
  });
});

// R√©agir au clic sur la page html
document.addEventListener("click", function () {
  // Lorsque l'on re-clic sur la page (peut importe o√π), cela ferme l'infobulle ouverte
  tooltips.forEach((tooltip) => tooltip.classList.remove("active"));
  });
});


  //////////////////////////////////
 // Fonction : observeTooltips() //
//////////////////////////////////

 // Objectif : Ajuster la position des infobulles pour qu'elles soient toujours enti√®rement visibles //
// ================================================================================================ //

function observeTooltips() {
  // Collecter la liste de tous les container
  const tooltips = document.querySelectorAll('.tooltip-container');
  
  // Recentrer le content en dessous du container (ou alors √©viter qu'il soit hors de la page)
  tooltips.forEach(container => {
    
    // R√©cup√©rer la question associ√© au container actuel
    const question = container.querySelector('.tooltip-question');
    // R√©cup√©rer le content associ√© au container actuel
    const content = container.querySelector('.tooltip-content');
    // Initialiser le d√©placement du content 
    let delta = 0;
    
    // R√©agir √† chaque changement observ√© sur la page
    const observer = new MutationObserver(mutations => {
      mutations.forEach(mutation => {
        // Tester si la mutation provient d'un changement de classe et d'attribu
        if (
          mutation.type === "attributes" &&
          mutation.attributeName === "class"
        ) {
          
          // D√©finir si le container actuel est ouvert (= contient la classe "active")
          const isActive = container.classList.contains("active");
          
          if (isActive && content) {
            
            // Collecter les informations de positionnement de content et de question
            const contentRect = content.getBoundingClientRect();
            const questionRect = question.getBoundingClientRect();
            
            // Calculer les centres de content et de question
            const centerContentX = (contentRect.right + contentRect.left)/2;
            const centerQuestionX = (questionRect.right + questionRect.left)/2;
            
            // Calculer la distance entre le centre de content et de question (car dans certains cas ils ne sont pas affich√© √† c√¥t√©)
            // Horizontalement
            const deltaX = centerContentX - centerQuestionX;
            // Verticalement
            const deltaY = (0.5/100)*window.innerHeight;
            
            // Initialiser la correction √† appliquer
            let correctionX = 0;
            let correctionY = 0;
            
            // Initialiser un seuil de tol√©rance d'espacement des deux centres
            const threshold = 10;
            
            // R√©cup√©rer la largeur du viewport
            const viewportWidth = window.innerWidth;
            
            // Tester si la distance (en absolu) entre les deux centres est sup√©rieur au seuil
            if (Math.abs(deltaX) > threshold) {
              // Si oui, appliquer une premi√®re correction
              correctionX = deltaX;
              correctionY = deltaY + (questionRect.bottom - contentRect.top);
            }
            
            // Recalculer le positionnement des √©l√©ments avec la premi√®re correction
            // Distance corrig√©e entre le bord gauche du viewport et la droite de content
            const adjustedContentRight = contentRect.right - correctionX;
            // Distance corrig√©e entre le bord gauche du viewport et la gauche de content
            const adjustedContentLeft = contentRect.left - correctionX;
            // Distance corrig√©e entre le haut du viewport et le haut de content
            const adjustedContentTop = question.bottom - contentRect.top + correctionY;

            // Tester si la bulle d√©passe sur la gauche, et si oui, la d√©caler vers la droite
            if (adjustedContentLeft < 0) {
              // Calculer la correction horizontale finale √† appliquer sur content
              const delta = - correctionX - adjustedContentLeft + (1/100)*viewportWidth - (50/100)*contentRect.width;
              console.log("D√©cale vers la droite/bas de :", delta, correctionY);
              // Appliquer les corrections horizontales et verticales sur content 
              content.style.transform = `translate(${delta}px, ${correctionY}px)`;
                
            } 
            
            // Tester si la bulle d√©passe sur la droite, et si oui, la d√©caler vers la gauche
            if (adjustedContentRight > viewportWidth) {
              // Calculer la correction jorizontale finale √† appliquer sur content
              const delta = - correctionX - (contentRect.right - viewportWidth) - (1/100)*viewportWidth - (50/100)*contentRect.width;
              console.log("D√©cale vers la gauche/bas de :", delta, correctionY);
              // Appliquer les corrections horizontales et verticales sur content 
              content.style.transform = `translate(${delta}px, ${correctionY}px)`;
            }
            
          // Si la bulle n'a pas la classe "active" on la replace √† son emplacement initial
          } else {
            // Si une translation √† √©t√© faite (detla est non nul)
            if (delta !== 0) {
              // Recentrer la bulle, en la d√©calant de - delta
              content.style.transform = `translateX(-${delta}px)`;
              // R√©initialiser delta
              delta = 0;
            // Sinon (delta = 0)
            } else {
              // Centrer la bulle sous le "?"
              content.style.transform = "translateX(-50%)";
            }
          }
        }
      });
    });
    
    observer.observe(container, {attributes: true});
  });
}

// Attendre que la page soit charg√©e pour appliquer la fonction observeTooltips
window.addEventListener("DOMContentLoaded", function () {
  console.log("DOM enti√®rement charg√©, script lanc√©");
  observeTooltips();
});




  // ========================= //
 // Zoomer sur une carte html //
// ========================= //

 // Objectif des fonctions : appliquer une classe "active" pour les bulles une fois dans le viewport //
// ================================================================================================ //


/**
 * Fonction utilitaire qui attend que les √©l√©ments "bulles" soient pr√©sents dans le DOM.
 * Elle ex√©cute un callback d√®s que ces √©l√©ments sont d√©tect√©s (ou affiche un avertissement apr√®s plusieurs tentatives).
 *
 * @param {string} selector - S√©lecteur CSS pour cibler les bulles.
 * @param {function} callback - Fonction √† ex√©cuter une fois les bulles disponibles.
 * @param {number} maxAttempts - Nombre maximal de tentatives avant abandon (par d√©faut : 20).
 * @param {number} interval - Intervalle entre chaque tentative (en ms, par d√©faut : 200).
 */
function waitForBulles(selector, callback, maxAttempts = 20, interval = 200) {
  let attempts = 0;
  const timer = setInterval(() => {
    const bulles = Array.from(document.querySelectorAll(selector));
    if (bulles.length > 0) {
      clearInterval(timer);
      callback(bulles);
    } else if (++attempts >= maxAttempts) {
      clearInterval(timer);
      console.warn("Les bulles n'ont pas √©t√© trouv√©es.");
    }
  }, interval);
}




  /////////////////////////////////////
 // Fonction : setupBulleTracking() //
////////////////////////////////////

 // Objectif : Appliquer dynamiquement la classe "active" aux bulles visibles dans le viewport //
// ========================================================================================== //

/**
 * Initialise le suivi des bulles visibles dans le viewport.
 * Applique dynamiquement une classe "active" √† chaque bulle visible √† l'√©cran, utile pour d√©clencher des effets (ex : zoom sur carte).
 *
 * @param {Element[]} bulles - Tableau des √©l√©ments de bulle √† suivre.
 */
function setupBulleTracking(bulles) {
  /**
   * D√©termine si un √©l√©ment est actuellement visible dans la fen√™tre (viewport).
   *
   * @param {Element} el - √âl√©ment DOM √† tester.
   * @returns {boolean} - true si visible, false sinon.
   */
  function isInViewport(el) {
    const rect = el.getBoundingClientRect();
    // R√©cup√©rer la dimension (hauteur) du viewport 
    const windowHeight = window.innerHeight || document.documentElement.clientHeight;
    // Renvoi true si est enti√®rement (de haut en bas) dans le viewport
    return rect.top < windowHeight && rect.bottom > 0;
  }

  /**
   * Met √† jour l‚Äô√©tat "active" des bulles selon leur visibilit√© dans le viewport.
   */
  function updateBulles() {
    bulles.forEach((bulle) => {
      if (isInViewport(bulle)) {
        // Ajoute la classe "active" √† la classList de la bulle cibl√©e
        bulle.classList.add("active");
      } else {
        // Retire la classe "active" √† la classList de la bulle cibl√©e
        bulle.classList.remove("active");
      }
    });
  }

  // Suivre les scrolls et redimensionnements de fen√™tre pour actualiser les bulles visibles
  window.addEventListener("scroll", updateBulles);
  window.addEventListener("resize", updateBulles);
  updateBulles(); // Mise √† jour initiale d√®s le chargement
}


 // Objectif : R√©cup√©rer les param√®tres de zoom des d√©partements cibl√©s dans zoomOrder //
// ================================================================================== //

  /////////////////////////////////
 // Fonction 1 : getCentroids() //
/////////////////////////////////

/**
 * Extrait dynamiquement les centro√Ødes g√©ographiques (lat/lng) int√©gr√©s √† l'int√©rieur d'une iframe.
 * Utilis√© pour d√©terminer les points de zoom sur une carte Leaflet.
 *
 * @param {HTMLIFrameElement} iframe - L'iframe contenant la carte et le script JSON.
 * @returns {Array|undefined} - Tableau de centro√Ødes ou undefined si une erreur survient.
 */
function getCentroids(iframe) {
  
  // Test si l'iframe charg√© n'est pas vide, s'il est vide => renvoi une erreur et arr√™te la fonction
  if (!iframe) {
    console.warn("Aucun iframe d√©tect√©");
    return;
  }
  
  
  function extractCentroids() {
    // R√©cup√®re le contenu de l'iframe dans "iframeDoc" (pour r√©cup√©rer les centro√Ødes int√©gr√©s dans le code html de la carte)
    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
    // R√©cup√©rer les centro√Ødes (version brutes json)
    const centroidsScript = iframeDoc.getElementById("centroids");

    if (!centroidsScript) {
      console.warn("√âl√©ment centroids introuvable dans l'iframe");
      return;
    }
    
    // Traduit le format json pour sortir les centro√Ødes int√©gr√©s √† la carte sous forme d'une liste (Array)
    const centroids = JSON.parse(centroidsScript.texteContent);
    
    // V√©rifier que les centro√Ødes sont bien charg√©s (sinon cela renvoi une erreur)
    if (!centroids) {
      console.warn("Erreur dans le chargement des centro√Ødes");
    }
    // Renvoyer ne sortie de fonction la liste de l'ensemble des centro√Ødes
    return centroids;
  }
  // Renvoyer ne sortie de fonction la liste de l'ensemble des centro√Ødes
  return extractCentroids();
}

  ////////////////////////////////////
 // Fonction 2 : getZoomSettings() //
////////////////////////////////////

/**
 * G√©n√®re les param√®tres de zoom (coordonn√©es + √©chelle) √† partir de l'ordre de zoom et des centro√Ødes.
 *
 * @param {Array} zoomOrder - Liste ordonn√©e des r√©gions ou d√©partements √† zoomer.
 * @param {HTMLIFrameElement} iframe - Iframe contenant la carte et les centro√Ødes.
 * @returns {Object} - Dictionnaire associant l‚Äôindex √† un objet {lat, lng, scale}.
 */
function getZoomSettings(zoomOrder, iframe) {
  
  // R√©cup√©rer l'ensemble des centr√Ødes de l'iframe
  const centroids = getCentroids(iframe);
  if (!centroids) {
    console.warn("Les centroides n'ont pas pu √™tre charg√©s");
    return;
  }
  
  // Initialisation de la liste qui va r√©pertorier les param√®tres de zoom, en lien avec les √©lements de la liste zoomOrder
  const zoomSettings = {};
  
  // Parcourir la liste des d√©partement cibl√©s dans zoomOrder et affecter pour chacun d'eux les param√®tres de zoom dans zoomSettings
  zoomOrder.forEach((depName, i) => {
    // R√©cup√©rer les coordonn√©es du centro√Øde correspondant √† chacun des √©lements de zoomOrder
    // Si aucune correspondance n'est trouv√©e => renvoi undefined
    const centroide = centroids.find(c => c.region === depName);
    // Affecte les param√®tre de zoom (dans zoomSettings) pour le d√©partement cibl√© selon leur index d'apparition dans zoomOrder (ici d√©fini par "i").
    if (centroide) {
      zoomSettings[i] = {
        // Cette version de scale (=puissance du zoom) permet d'affecter un scale de 6, si le terme de zoomOrder test√© est "France", sinon cela affecte 9 par d√©faut.
        // Cela permet d'avoir une puissance de zoom diff√©rente selon les √©l√©ments.
        scale: depName === "France" ? 6 : 9,
        lat: centroide.lat,
        lng: centroide.lng
      };
    }
  });

  if (!Object.keys(zoomSettings).length) {
    console.warn("Zoom Settings non charg√©s");
    return;
  }
  // Renvoi en fin de fonction la liste des param√®tres de zoom.
  return zoomSettings;
}


 // Objectif : Identifie l‚Äôindex de scrollama de la premi√®re bulle d‚Äôune section ".map" //
// =================================================================================== //

    // Description : --------------------------------------------------------------------------------------- //
   // Cette fonctionnalit√© est (pour le moment) exclusivement utilis√©e pour g√©rer les int√©ractions de zoom  //
  // sur les cartes. Il est imp√©ratif de r√©cup√©rer l'index de la premi√®re bulle de la section CloseRead de //
 // chaque carte pour ensuite calculer un index relatif √† cette section (relativeIndex), et zoomer sur la //
// bonne zone. ----------------------------------------------------------------------------------------- //

  //////////////////////////////////////
 // Fonction : getFirstBubbleIndex() //
//////////////////////////////////////

/**
 * Identifie l‚Äôindex de scrollama de la premi√®re bulle d‚Äôune section ".map".
 *
 * @param {HTMLElement} section - Section contenant la carte et ses bulles.
 * @returns {number|null} - Index de la premi√®re bulle, ou null si non trouv√©.
 */
function getFirstBubbleIndex(section) {
  // R√©cup√®re le premier "triger" la section = celui qui contient la premi√®re bulle
  const firstTrigger = section?.querySelector(".narrative-col .trigger");
  // Extrait le scrollama index de la premi√®re bulle
  const index = firstTrigger?.dataset.scrollamaIndex;
  if (index !== undefined) {
    console.log("Premi√®re bulle trouv√©e :", index);
    // Renvoi en sortie l'index de la premi√®re bulle 
    return parseInt(index, 10);
  } else {
    console.warn("Premi√®re bulle introuvable");
    return null;
  }
}

 // Objectif : Attribuer un index de scrollama aux bulles n'en ayant pas, en propageant le dernier index valide rencontr√© //
// ===================================================================================================================== //


    // Description : ---------------------------------------------------------------------------------------------------- //
   // Dans certains cas, pour les bulles non d√©finies par une synthaxe purement issue de CloseRead, le .trigger associ√©  //
  // √† cette bulle ne contient pas de Scrollama index (c'est le cas quans on change la couleur du fond de la bulle par  //
 // exemple). Donc pour quand m√™me permettre l'affichage (fonction surtout utilis√© dans le cas des zoom sur une carte) //
// de la bonne bulle associ√© √† la bonne animation, il faut ajouter un index fictif le "scrollamaIndexPropagated". --- //


  //////////////////////////////////////////
 // Fonction : propagateScrollamaIndex() //
//////////////////////////////////////////

/**
 * Attribue un index de scrollama aux bulles n'en ayant pas,
 * en propageant le dernier index valide rencontr√©.
 *
 * @param {HTMLElement[]} bulles - Liste des bulles narratives.
 */
function propagateScrollamaIndex(bulles) {
  // Initialiser lastValidIndex
  let lastValidIndex = null;
  
  // Rechercher pour chaque bulle, si le .trigger associ√© √† un index scrollama
  bulles.forEach((bulle) => {
    // Acc√©der au .trigger de la bulle cibl√©e
    const trigger = bulle.closest(".trigger");
    // Tester si le .trigger √† in index Scrollama d√©j√† d√©fini
    if (trigger?.dataset.scrollamaIndex !== undefined) {
      // Si oui, assigner √† lastValidIndex l'index Scrollama de ce .trigger
      lastValidIndex = parseInt(trigger.dataset.scrollamaIndex, 10);
      // Assigner √† la bulle un index Scrollama fictif
      bulle.dataset.scrollamaIndexPropagated = lastValidIndex;
    } else if (lastValidIndex !== null) {
      // Si non, assigner √† la bulle le lastValidIndex (= cette bulle aura le m√™me index fictif que la pr√©c√©dente)
      bulle.dataset.scrollamaIndexPropagated = lastValidIndex;
    }
  });
}


 // Objectif : R√©cup√©rer l'index de la bulle actuellement visible dans le viewport //
// ============================================================================== //

  //////////////////////////////////////
 // Fonction : getActiveBulleIndex() //
//////////////////////////////////////


/**
 * R√©cup√®re l‚Äôindex scrollama (propag√©) de la bulle narrative visible la plus avanc√©e.
 *
 * @returns {number|null} - Index de la bulle active ou null si aucune n‚Äôest active.
 */
function getActiveBulleIndex() {
  // Collecter la / les bulles pr√©sentes dans le viewport (= avec la classe "active")
  const activeBulles = Array.from(document.querySelectorAll(".narrative.active"));
  // S'il n'y a aucunes bulles, renvoyer "null"
  if (activeBulles.length === 0) return null;
  
  // Sinon, r√©cup√©rer l'index Scrollama fictif le plus √©lev√© parmi les bulles actives
  const maxIndex = activeBulles.reduce((max, bulle) => {
    const index = parseInt(bulle.dataset.scrollamaIndexPropagated, 10);
    return index > max ? index : max;
  }, -1);
  // Renvoyer l'index maximal s'il existe, sinon renvoyer null (= aucunes bulles dans le viewport)
  return maxIndex === -1 ? null : maxIndex;
}

 // Objectif : Cr√©er une animation de zoom sur une zone donn√©es //
// =========================================================== //

  ////////////////////////////
 // Fonction : applyZoom() //
////////////////////////////

    // Description : ------------------------------------------------------------------------------------------------- //
   // Cette fonction, permet de, √† partir de l'index actuel de la bulle affich√© sur le viewport et des param√®tres de  //
  // zoom de chaque iframe, d'associer le bon zoom √† la bonne bulle, et de synchroniser le zoom sp√©cifique de chaque //
 // bulle. -------------------------------------------------------------------------------------------------------- //

/**
 * Applique dynamiquement un zoom sur la carte active en fonction de l'index de bulle.
 *
 * @param {number} index - Index de la bulle active.
 * @param {Object} iframeZoomOrder - Objet contenant les zoomOrders et zoomSettings pour chaque iframe.
 */
 
 // Initialisation de lastIndex en amont de la fonction
let lastIndex = null;

function applyZoom(index, iframeZoomOrder) {
  // Test permettant de mettre fin √† la fonction si l'index de la bulle n'a pas chang√© (soit la m√™me bulle, soit 2 bulles ayant le m√™me index)
  if (index === lastIndex) return;
  // Assigner un index qui va permettre de v√©rifier une condition sp√©cifique dans la suite de la fonction
  const verifyIndex = lastIndex;
  // L'index actuel √©tant diff√©rent du pr√©c√©dent, alors r√©assigner le bon "lastIndex"
  lastIndex = index;
  
  // R√©cup√©rer la bulle affich√© dans le viewport
  const activeBulle = document.querySelector(".narrative.active");
  // R√©cup√©rer les informations sur la section CloseRead dans laquelle elle se trouve
  const section = activeBulle?.closest(".cr-section.map");
  // R√©cup√©rer l'iframe pr√©sent dans cette section CloseRead 
  const iframe = section?.querySelector("iframe");
  
  if (!iframe || !iframe.id || !iframeZoomOrder[iframe.id]) return;
  
  // R√©cup√©rer les param√®tres de zoom int√©gr√©s dans iframeZoomOrder
  const { zoomOrder, zoomSettings, firstBubbleIndexSection } = iframeZoomOrder[iframe.id];
  // Tester si tous les param√®tres ont bien √©t√© r√©cup√©r√©s
  if (!zoomOrder || !zoomSettings || !firstBubbleIndexSection) {
    console.warn("Erreur de chargement d'au moins une donn√©e de iframeZoomOrder dans applyZoom");
    return;
  }
  
  // Calculer l'index Scrollama relatif √† cette section CloseRead
  const relativeIndex = index - firstBubbleIndexSection;

  
  // Si on scrolle vers un d√©partement d√©j√† visible ‚Üí ne pas re-zoomer (importance du verifyIndex dans ce test)
  if (verifyIndex !== null && index === verifyIndex + 1 && zoomOrder[relativeIndex] === zoomOrder[relativeIndex - 1]) return;
  
  // R√©cup√©rer les param√®tres de zoom de la bulle actuellement active
  const current = zoomSettings[relativeIndex] || zoomSettings[0];
  if (!current) return;
  
  // R√©cup√©rer l'iframe dans un objet "map"
  const map = iframe.contentWindow.map;
  // R√©up√©rer les fonctionnalit√© offertes par Leaflet dans un objet "L"
  const L = iframe.contentWindow.L;
  if (!map || typeof map.setView !== "function") {
    console.warn("Objet 'map' introuvable");
    return;
  }
  
  // Initialise ou ferme la fonctionalit√© de popup de Leaflet
  map.closePopup();
  
  // Zoomer sur la bonne zone, en lien avec la bulle active du viewport
  // Pour la premi√®re bulle de la section, uniquement zoomer sur la zone en question
  if (index === firstBubbleIndexSection) {
    map.setView([current.lat, current.lng], current.scale);
  // Pour les autres bulles, faire d'abord un d√©-zoom sur le centre initial de la carte, puis zoomer sur la zone cibl√©e
  } else {
    map.setView([zoomSettings[0].lat, zoomSettings[0].lng], zoomSettings[0].scale);
    setTimeout(() => {
      map.setView([current.lat, current.lng], current.scale);
      const depName = zoomOrder[relativeIndex];
      // afficher un popup avec le nom du d√©partement (sauf quand c'est le zoom initial = france enti√®re)
      if (L && depName && depName !== "France") {
        // Cr√©er le popup
        const popup = L.popup()
          // Y int√©grer les coordonn√©es du d√©partement cibl√©
          .setLatLng([current.lat, current.lng])
          // Afficher le nom du d√©partement cibl√© dans le popup
          .setContent(`<strong>${depName}</strong>`);
        // Ouvrir le popup
        map.openPopup(popup);
      }
    }, 1000);
  }
}

 // Objectif : Charger l'ensemble des fonction utlise au zoom dans le bon ordre, apr√®s avoir charg√© la page //
// ======================================================================================================= //

/**
 * Initialisation √† la fin du chargement de la page :
 * - D√©tection des bulles narratives
 * - Pr√©paration des zooms pour chaque section .map
 * - Activation du zoom dynamique au scroll
 */

// Initialisation de iframeZoomOrder en amont du script 
const iframeZoomOrder = {};

// Charger la page (/!\ primordial pour acc√©der √† l'ensemble des √©lements)
window.addEventListener("load", () => {
  waitForBulles("main .cr-section .narrative-col .trigger .narrative", (bulles) => {
    setupBulleTracking(bulles);
    propagateScrollamaIndex(bulles);
    
    // Collecter l'ensemble des sections sections CloseRead contenant une carte
    const mapSections = Array.from(document.querySelectorAll(".cr-section.map"));
    
    // Pour chacune de ces sections, rentrer les donn√©es de zoom, iframe, ... dans iframeZoomOrder
    mapSections.forEach((section, index) => {
      // R√©cup√®re la section Quarto dans laquelle se trouve la carte
      const parentSection = section.closest("section");
      // R√©cup√®re la liste des d√©partement sur lesquels il faut appliquer un zoom
      const zoomOrderScript = parentSection.querySelector("#zoomOrder");
      if (!zoomOrderScript) {
        console.warn("Zoom Order Script Introuvable");
        return;
      }
      
      // Transformer une cha√Æne JSON en objet JavaScript
      const zoomOrder = JSON.parse(zoomOrderScript.textContent);
      // Collecter l'iframe de la section
      const iframe = section.querySelector("iframe");

      if (!iframe) {
        console.warn("Iframe manquant pour la carte de cette section");
        return;
      }

      // Donner un ID unique √† chaque iframe pour le suivi
      if (iframe.id === "map") {
        iframe.id = `map-${index + 1}`;
      }
      
      // R√©cup√©rer les param√®tres de zoom (logitude, latitude, ...) pour chacun des d√©partement de la liste "zoomOrder"
      const zoomSettings = getZoomSettings(zoomOrder, iframe);
      // R√©cup√©rer l'index de la premi√®re bulle de la section 
      const firstBubbleIndexSection = getFirstBubbleIndex(section);
      
      // Int√©grer l'ensemble des donn√©es cit√©es pr√©c√©demment dans iframeZoomOrder
      iframeZoomOrder[iframe.id] = {
        zoomOrder,
        zoomSettings,
        firstBubbleIndexSection,
        iframe,
      };
    });
    
    // √âcoute du scroll pour d√©clencher les zooms => fait tourner cette partie du code √† chaque mouvement de scroll
    window.addEventListener("scroll", () => {
      // R√©cup√®re l'index de la bulle actuellement visible dans le viewport
      const activeIndex = getActiveBulleIndex();
      if (activeIndex !== null) {
        // Application de la fonction applyZoom
        applyZoom(activeIndex, iframeZoomOrder);
      }
    });
  });
});


// ===== //
// Autre //
// ===== //

// Centrer les images qui ont comme classe "img-fluid-custom"
document.querySelectorAll('p').forEach(p => {
  if (p.querySelector('img.img-fluid-custom')) {
    p.style.textAlign = 'center';
  }
});

